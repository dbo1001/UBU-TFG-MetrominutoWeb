 # distance_matrix(client, origins, destinations,
    #                 mode=None, language=None, avoid=None, units=None,
    #                 departure_time=None, arrival_time=None, transit_mode=None,
    #                 transit_routing_preference=None, traffic_model=None, region=None);


# Burgos = 42.34, -3.69
    # Medina = 42.93, -3.51
    # Villar = 42.9396796, -3.5805516
    # Espinosa = 43.0792415, -3.5550065
    # origins_prueba = [[42.34, -3.69], [42.93, -3.51], [42.9396796, -3.5805516], [43.0792415, -3.5550065]]
    # destinations_prueba = [[42.34, -3.69], [42.93, -3.51], [42.9396796, -3.5805516], [43.0792415, -3.5550065]]
    # matrix = gmaps.distance_matrix(origins_prueba, destinations_prueba)

# graph.add_node('Burgos', pos=(42.34, 3.69))
    # graph.add_node('Medina', pos=(42.93, 3.51))
    # graph.add_node('Villar', pos=(42.93, 3.58))
    # graph.add_node('Espinosa', pos=(43.07, 3.55))
    #
    # graph.add_edge('Burgos', 'Medina', weight=dista[0][1])
    # graph.add_edge('Medina', 'Villar', weight=dista[1][2])
    # graph.add_edge('Villar', 'Espinosa', weight=dista[2][3])
    # graph.add_edge('Espinosa', 'Burgos', weight=dista[3][0])


# edge_list = list(mst)  # make a list of the edges
    # print(edge_list)
    # for z in range(0, edge_list.__len__()):
    #     min_graph.add_edge(edge_list[z][0], edge_list[z][1], weight=edge_list[z][2]['weight'])
    #nx.draw(min_graph, pos=nx.get_node_attributes(graph, 'pos'), with_labels=True)


 # mst = nx.minimum_spanning_tree(graph, weight='weight')
    # nx.draw(mst, pos=nx.get_node_attributes(graph, 'pos'), with_labels=True)

    # mst = nx.minimum_spanning_edges(graph, weight='weight', data=True)
    # edge_list = list(mst)  # make a list of the edges
    # prueba = sample(edge_list, k=2)
    # for z in range(0, edge_list.__len__()):
    #     min_graph.add_edge(edge_list[z][0], edge_list[z][1], weight=edge_list[z][2]['weight'])
    # nx.draw(min_graph, pos=nx.get_node_attributes(graph, 'pos'), with_labels=True)
    #
    # plt.show()




def save_nodes_json(graph):
    # data = {'stations': {}, 'lines': []}
    stations = {}
    # stations
    for node in graph.nodes(data=True):
        stations[node[0]] = {}
        stations[node[0]]['label'] = node[0]
        stations[node[0]]['position'] = {}
        stations[node[0]]['position']['lat'] = node[1]['pos'][0]
        stations[node[0]]['position']['lng'] = node[1]['pos'][1]
    i = 0
    lines_list = [{'name': 'prueba', 'label': 'aaa', 'color': '#FFD600', 'shiftCoords': [], 'nodes': []}]
    lines_list[0]['shiftCoords'].append(0)
    lines_list[0]['shiftCoords'].append(0)
    len = graph.nodes(data=True).__len__()
    print(len)
    for nod in graph.nodes(data=True):
        lines_list[0]['nodes'].append({'coords': [], 'marker': 'interchange', 'name': nod[0], 'labelPos': 'E'})
        lines_list[0]['nodes'][i]['coords'].append(nod[1]['pos'][0]*1000)
        lines_list[0]['nodes'][i]['coords'].append(nod[1]['pos'][1]*1000)
        if i < len:
            lines_list[0]['nodes'].append({'coords': [nod[1]['pos'][0]*1000, nod[1]['pos'][1]*1000]})
        i = i+1
    data = {'stations': stations, 'lines': lines_list}
    with open('./static/result.json', 'w') as fp:
        json.dump(data, fp)
    print(data)
    return 0